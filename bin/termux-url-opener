#!/data/data/com.termux/files/usr/bin/bash
# Termux URL Opener for VARIABOT Integration
# Handles URLs shared to Termux and processes them through VARIABOT
# Auto-configured for Termux environment with proper validation

set -euo pipefail  # Exit on any error, undefined vars, pipe failures

# Color codes for better terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
TERMUX_HOME="${TERMUX__HOME:-/data/data/com.termux/files/home}"
VARIABOT_DIR="${TERMUX_HOME}/VARIABOT"
LOG_DIR="${TERMUX_HOME}/.variabot/logs"
URL_CACHE_DIR="${TERMUX_HOME}/.variabot/cache/urls"
CONFIG_FILE="${TERMUX_HOME}/.variabot/url_opener.conf"

# Create required directories
mkdir -p "$LOG_DIR"
mkdir -p "$URL_CACHE_DIR"

# Log file with timestamp
LOG_FILE="${LOG_DIR}/url_opener_$(date +%Y%m%d).log"

# Logging function
log_message() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    echo -e "${CYAN}[$level]${NC} $message"
}

# Validate URL
validate_url() {
    local url="$1"
    if [[ -z "$url" ]]; then
        log_message "ERROR" "No URL provided"
        return 1
    fi
    
    # Basic URL validation
    if [[ ! "$url" =~ ^https?:// ]]; then
        log_message "ERROR" "Invalid URL format: $url"
        return 1
    fi
    
    return 0
}

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        log_message "INFO" "Configuration loaded from $CONFIG_FILE"
    else
        # Create default configuration
        cat > "$CONFIG_FILE" << 'EOF'
# VARIABOT URL Opener Configuration
# Customize URL handling behavior

# Enable/disable automatic processing
AUTO_PROCESS=true

# Enable/disable notifications
ENABLE_NOTIFICATIONS=true

# Default action for URLs (process, save, download)
DEFAULT_ACTION="process"

# Enable/disable URL caching
ENABLE_CACHE=true

# Maximum cache size in MB
MAX_CACHE_SIZE=100

# VARIABOT interface to use (auto, web, terminal)
VARIABOT_INTERFACE="auto"

# Enable/disable automatic VARIABOT launch
AUTO_LAUNCH_VARIABOT=false
EOF
        log_message "INFO" "Created default configuration at $CONFIG_FILE"
        source "$CONFIG_FILE"
    fi
}

# Send notification (if termux-api is available)
send_notification() {
    local title="$1"
    local message="$2"
    
    if [[ "${ENABLE_NOTIFICATIONS:-true}" == "true" ]] && command -v termux-notification &> /dev/null; then
        termux-notification --title "$title" --content "$message" --priority high
    fi
}

# Save URL to cache
save_url_to_cache() {
    local url="$1"
    local timestamp=$(date +%s)
    local cache_file="${URL_CACHE_DIR}/${timestamp}.url"
    
    if [[ "${ENABLE_CACHE:-true}" == "true" ]]; then
        echo "$url" > "$cache_file"
        log_message "INFO" "URL cached: $cache_file"
    fi
}

# Process URL with VARIABOT
process_url_with_variabot() {
    local url="$1"
    
    log_message "INFO" "Processing URL with VARIABOT: $url"
    
    # Check if VARIABOT is installed
    if [[ ! -d "$VARIABOT_DIR" ]]; then
        log_message "ERROR" "VARIABOT not found at $VARIABOT_DIR"
        send_notification "VARIABOT Error" "VARIABOT not installed. Please install first."
        return 1
    fi
    
    # Check if VARIABOT is running
    if pgrep -f "variabot_universal.py" > /dev/null; then
        log_message "INFO" "VARIABOT is already running"
        # Send URL to running instance (could use API, file, or socket)
        echo "$url" > "${TERMUX_HOME}/.variabot/url_queue.txt"
        send_notification "VARIABOT" "URL queued for processing"
    else
        if [[ "${AUTO_LAUNCH_VARIABOT:-false}" == "true" ]]; then
            log_message "INFO" "Launching VARIABOT to process URL"
            send_notification "VARIABOT" "Launching to process URL..."
            
            # Launch VARIABOT in background with URL parameter
            cd "$VARIABOT_DIR"
            nohup bash launch_termux.sh --interface "${VARIABOT_INTERFACE:-auto}" &> "${LOG_DIR}/variabot_launch.log" &
            
            # Wait a moment for startup
            sleep 2
            
            # Queue the URL
            echo "$url" > "${TERMUX_HOME}/.variabot/url_queue.txt"
        else
            log_message "INFO" "VARIABOT not running and auto-launch disabled"
            send_notification "VARIABOT" "URL saved. Launch VARIABOT to process."
            # Save for manual processing
            echo "$url" >> "${TERMUX_HOME}/.variabot/pending_urls.txt"
        fi
    fi
}

# Download URL content
download_url() {
    local url="$1"
    local download_dir="${TERMUX_HOME}/storage/downloads/variabot"
    
    mkdir -p "$download_dir"
    
    log_message "INFO" "Downloading URL content: $url"
    
    if command -v wget &> /dev/null; then
        cd "$download_dir"
        wget -c "$url" &>> "$LOG_FILE" && {
            send_notification "Download Complete" "URL content downloaded successfully"
            log_message "INFO" "Download completed: $url"
        } || {
            send_notification "Download Failed" "Failed to download URL content"
            log_message "ERROR" "Download failed: $url"
        }
    else
        log_message "ERROR" "wget not installed. Install with: pkg install wget"
        send_notification "Error" "wget not installed"
        return 1
    fi
}

# Main URL handling logic
handle_url() {
    local url="$1"
    
    log_message "INFO" "Received URL: $url"
    
    # Validate URL
    if ! validate_url "$url"; then
        send_notification "Invalid URL" "The shared URL is not valid"
        return 1
    fi
    
    # Save to cache
    save_url_to_cache "$url"
    
    # Determine action based on configuration
    local action="${DEFAULT_ACTION:-process}"
    
    case "$action" in
        process)
            process_url_with_variabot "$url"
            ;;
        download)
            download_url "$url"
            ;;
        save)
            log_message "INFO" "URL saved for later processing"
            echo "$url" >> "${TERMUX_HOME}/.variabot/saved_urls.txt"
            send_notification "URL Saved" "URL saved to VARIABOT"
            ;;
        *)
            log_message "WARN" "Unknown action: $action, defaulting to process"
            process_url_with_variabot "$url"
            ;;
    esac
}

# Display usage information
show_usage() {
    cat << EOF
VARIABOT Termux URL Opener
Usage: termux-url-opener URL

This script handles URLs shared to Termux and processes them through VARIABOT.

Configuration file: $CONFIG_FILE
Log file: $LOG_FILE

Options in configuration:
  AUTO_PROCESS          - Automatically process URLs (default: true)
  ENABLE_NOTIFICATIONS  - Show notifications (default: true)
  DEFAULT_ACTION        - Default action: process, save, download
  AUTO_LAUNCH_VARIABOT  - Auto-launch VARIABOT if not running (default: false)

Examples:
  Share a URL to Termux from your browser
  termux-url-opener https://example.com/article
  
For more information, visit VARIABOT documentation.
EOF
}

# Main execution
main() {
    # Load configuration
    load_config
    
    # Check if URL is provided
    if [[ $# -eq 0 ]]; then
        log_message "ERROR" "No URL provided"
        show_usage
        exit 1
    fi
    
    # Get URL from argument
    local url="$1"
    
    # Handle special commands
    case "$url" in
        --help|-h)
            show_usage
            exit 0
            ;;
        --version|-v)
            echo "VARIABOT Termux URL Opener v1.0"
            echo "Part of VARIABOT framework"
            exit 0
            ;;
        --config|-c)
            echo "Configuration file: $CONFIG_FILE"
            if [[ -f "$CONFIG_FILE" ]]; then
                cat "$CONFIG_FILE"
            fi
            exit 0
            ;;
        *)
            # Handle URL
            handle_url "$url"
            ;;
    esac
}

# Execute main function
main "$@"

# References:
# - Internal: /reference_vault/PRODUCTION_GRADE_STANDARDS.md#development-standards
# - Internal: /reference_vault/linux_kali_android.md#termux-optimization
# - Internal: /reference_vault/ORGANIZATION_STANDARDS.md#file-organization
# - External: Termux URL Opener — https://wiki.termux.com/wiki/Termux-url-opener
# - External: Bash Scripting Guide — https://www.gnu.org/software/bash/manual/
