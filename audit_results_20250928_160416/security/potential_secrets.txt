./utils.py:            os.environ[key] = path
./android_rooting/utils/android_utils.py:                        key, value = line.split(':', 1)
./android_rooting/utils/android_utils.py:                        meminfo[key.strip()] = int(numeric_value) if numeric_value else 0
./android_rooting/core/root_adaptor.py:        method_scores.sort(key=lambda x: x[1], reverse=True)
./android_rooting/core/privilege_escalation.py:            key=lambda x: (
./android_rooting/core/android_pentest.py:            "hardcoded_secrets": [],
./android_rooting/core/android_pentest.py:            # Search for API keys and secrets
./android_rooting/core/android_pentest.py:            analysis_results["api_keys"] = self._find_api_keys(apk_path)
./android_rooting/core/android_pentest.py:            analysis_results["hardcoded_secrets"] = self._find_hardcoded_secrets(
./android_rooting/core/android_pentest.py:                    "password",
./android_rooting/core/android_pentest.py:                    "secret",
./android_rooting/core/android_pentest.py:        api_keys = []
./android_rooting/core/android_pentest.py:    def _find_hardcoded_secrets(self, apk_path: str) -> List[str]:
./android_rooting/core/android_pentest.py:        """Find hardcoded secrets and credentials"""
./android_rooting/core/android_pentest.py:        secrets = []
./android_rooting/core/android_pentest.py:                # Look for common secret patterns
./android_rooting/core/android_pentest.py:                secret_indicators = [
./android_rooting/core/android_pentest.py:                    "password=",
./android_rooting/core/android_pentest.py:                    "secret=",
./android_rooting/core/android_pentest.py:                    "key=",
./android_rooting/core/android_pentest.py:                    for indicator in secret_indicators:
./android_rooting/core/android_pentest.py:                            secrets.append(line)
./android_rooting/core/android_pentest.py:            self.logger.error(f"Secret search failed: {e}")
./android_rooting/core/android_pentest.py:        return list(set(secrets))
./android_rooting/core/android_pentest.py:        # Check for hardcoded secrets
./android_rooting/core/android_pentest.py:        secrets = analysis_results.get("hardcoded_secrets", [])
./android_rooting/core/android_pentest.py:        if secrets:
./android_rooting/core/android_pentest.py:                    "issue": "Hardcoded Secrets",
./android_rooting/core/android_pentest.py:                    "description": f"Found {len(secrets)} potential hardcoded secrets",
./android_rooting/core/sandbox_escape.py:            key=lambda x: (
./android_rooting/core/magisk_manager.py:                "magisk --sqlite \"SELECT value FROM settings WHERE key='zygisk'\"",
./android_rooting/core/magisk_manager.py:                        key, value = line.strip().split("=", 1)
./android_rooting/core/magisk_manager.py:                        info[key] = value
./variabot_integration.py:            os.environ[key] = path
./patch_integration.py:        yourHFtoken = st.sidebar.text_input("HuggingFace Token (optional)", type="password")
